{"title":"使用cglib来检测数据库连接释放情况","date":"2018-08-12T14:53:42.000Z","slug":"使用cglib来检测数据库连接释放情况","tags":["JAVA","动态代理"],"categories":["JAVA"],"updated":"2018-08-12T15:05:46.775Z","content":"<blockquote>\n<p>最近在做项目的时候，遇见了有些问题，发现操作一会服务器边挂掉了，使用的是单机测试，并没有涉及到并发的情况，数据库怎么会挂呢，项目中使用的是阿里巴巴的druid连接池，总是会莫名其妙的出现没有空闲连接可用的情况。让人颇为头痛，一想可能是dao层使用完连接没有释放，但是检测代码并没出现保存的情况，逻辑完全合理，花费了好多时间都没能找到问题的出处，于是便想到使用cglib做个代理类，进行拦截，查看到底是哪些方法发生了资源不释放的情况。</p>\n</blockquote>\n<p>其实实现起来还是比较简单的，就是使用cglib进行代理，然后拦截getConnection，与clsoe方法。</p>\n<ul>\n<li><h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zetmap.util.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.BeansException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">dataSourceProcess</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanPostProcessor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(Object o, String s)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessAfterInitialization</span><span class=\"params\">(Object o, String s)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"string\">\"dataSource\"</span>.equals(s))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(o <span class=\"keyword\">instanceof</span> FactoryBean)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> createDataSourceByFactory((FactoryBean)o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> createDataSource((DataSource)o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> FactoryBean <span class=\"title\">createDataSourceByFactory</span><span class=\"params\">(<span class=\"keyword\">final</span> FactoryBean factoryBean)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Enhancer.isEnhanced(factoryBean.getClass()))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> factoryBean;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        MethodInterceptor factoryInterceptor = <span class=\"keyword\">new</span> MethodInterceptor() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">                Object ret = method.invoke(factoryBean,objects);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!<span class=\"string\">\"getObject\"</span>.equals(method.getName()))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> createDataSource((DataSource)ret);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> createProxy(FactoryBean.class,factoryInterceptor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> DataSource <span class=\"title\">createDataSource</span><span class=\"params\">(<span class=\"keyword\">final</span> DataSource dataSource)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Enhancer.isEnhanced(dataSource.getClass()))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dataSource;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        MethodInterceptor methodInterceptor = <span class=\"keyword\">new</span> MethodInterceptor() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">                Object ret = method.invoke(dataSource,objects);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!<span class=\"string\">\"getConnection\"</span>.equals(method.getName()))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> createConnection((Connection)ret);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> createProxy(DataSource.class,methodInterceptor);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Connection <span class=\"title\">createConnection</span><span class=\"params\">(<span class=\"keyword\">final</span> Connection connection)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Enhancer.isEnhanced(connection.getClass()))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> connection;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        MethodInterceptor methodInterceptor = <span class=\"keyword\">new</span> MethodInterceptor() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!<span class=\"string\">\"close\"</span>.equals(method.getName()))&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//此处可以记录日志</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"close connection\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> method.invoke(connection,objects);;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> createProxy(Connection.class,methodInterceptor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建代理类对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> typeClass</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> interceptor</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">createProxy</span><span class=\"params\">(Class&lt;T&gt; typeClass,MethodInterceptor interceptor)</span></span>&#123;</span><br><span class=\"line\">        Enhancer enhancer  = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        enhancer.setInterfaces(<span class=\"keyword\">new</span> Class[]&#123;typeClass&#125;);</span><br><span class=\"line\">        enhancer.setCallback(interceptor);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T)enhancer.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"Quartz集群模式的定时任务","slug":"Quartz集群模式的定时任务"},"next":{"title":"【LeetCode】Two Sum","slug":"【LeetCode】Two-Sum"},"link":"https://easyhaloo.github.io/post/使用cglib来检测数据库连接释放情况/","copyright":true}