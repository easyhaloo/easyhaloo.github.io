{"title":"Eureka架构综述","date":"2018-10-17T12:25:35.000Z","slug":"Eureka架构综述","tags":["SpringCloud"],"categories":["SpringCloud"],"updated":"2018-10-26T11:20:13.145Z","content":"<h2 id=\"Eureka架构\"><a href=\"#Eureka架构\" class=\"headerlink\" title=\"Eureka架构\"></a>Eureka架构</h2><p><strong>Eureka包含服务端与客户端</strong></p>\n<ul>\n<li>Eureka Server : Eureka服务端一般作为注册中心，维护服务实例的列表信息</li>\n<li>Eureka Client : Eureka客户端，向注册中心注册服务实例和拉取配置注册服务信息，一般来说服务都需要作为Eureka Client。</li>\n</ul>\n<p>在SpringCloud体系中，Eureka一般都是客户端与服务端一体的，需要通过参数配置来说明是作为客户端使用还是服务端使用。</p>\n<p><strong>Eureka架构图</strong></p>\n<div class=\"article-img\"><p><img src=\"https://github.com/Netflix/eureka/raw/master/images/eureka_architecture.png\" alt=\"Eureka架构图\"></p></div>\n<p>上面一副图包含如下几个信息：</p>\n<ul>\n<li>Eureka Server : 代表注册中心集群</li>\n<li>us-east-1c : 代表区域</li>\n<li>Application Service : 服务提供者</li>\n<li>Application Client: 服务消费者</li>\n</ul>\n<p>服务提供者，服务消费者同属为Eureka客户端，如图所示，Eureka是以区域进行集群，每个区域只有一个集群，每个集群必须保证至少存在一台<code>Eureka Server</code>来处理区域故障。</p>\n<h3 id=\"服务注册与调用\"><a href=\"#服务注册与调用\" class=\"headerlink\" title=\"服务注册与调用\"></a>服务注册与调用</h3><blockquote>\n<p>服务在Eureka注册，然后发送心跳每30秒更新一次租约，在超过90s后不能进行服务续约，那么Eureka服务器会将此服务从注册列表中剔除，新注册的实例信息和续约信息会复制到集群中的所有Eureka节点。</p>\n</blockquote>\n<h4 id=\"不同区域的服务注册与调用过程\"><a href=\"#不同区域的服务注册与调用过程\" class=\"headerlink\" title=\"不同区域的服务注册与调用过程\"></a>不同区域的服务注册与调用过程</h4><p>us-east-1c区域代表了同区域内的服务注册与调用过程。</p>\n<ol>\n<li><code>Application Service</code>启动后向<code>Eureka Server</code>注册中心注册服务，包括IP、Port、服务名等信息。</li>\n<li>Application Service启动后向<code>Eureka Server</code>注册中心注册服务，包括IP、Port、服务名等信息。</li>\n<li>Application Client发起远程调用的时候优先调用本区域内的Application Service。如果本区内没有可用的Application Service，才会发起对其他区内的Service调用。</li>\n</ol>\n<h4 id=\"同区域的服务注册与调用过程\"><a href=\"#同区域的服务注册与调用过程\" class=\"headerlink\" title=\"同区域的服务注册与调用过程\"></a>同区域的服务注册与调用过程</h4><p>三个区域us-east-1c,us-east-1d,us-east-1e结合在一起代表了不同区域内的服务注册与调用过程.</p>\n<ol>\n<li>us-east-1c内的Application Service启动后，向本区内的Eureka Server注册服务信息。并跟本区内的Eureka Server维持心跳续约。</li>\n<li>Eureka Server会将服务信息同步至相邻的us-east-1d的Eureka Server以及us-east-1e的Eureka Server</li>\n<li>us-east-1e内的Application Service启动后，向本区内的Eureka Server注册服务信息。并跟本区内的Eureka Server维持心跳续约。</li>\n<li>Eureka Server会将服务信息同步至相邻的us-east-1d的Eureka Server以及us-east-1c的Eureka Server</li>\n<li>us-east-1d内的Application Client启动后，从本区内的Eureka Server拉取注册列表。</li>\n<li>us-east-1d内的Application Client发起远程调用时，会先检索本区有没有可用的Application Service，如果没有就会通过某种算法调用us-east-1c或us-east-1e中的Application Service服务。</li>\n</ol>\n<h3 id=\"服务续约、下线、剔除\"><a href=\"#服务续约、下线、剔除\" class=\"headerlink\" title=\"服务续约、下线、剔除\"></a>服务续约、下线、剔除</h3><h4 id=\"服务续约\"><a href=\"#服务续约\" class=\"headerlink\" title=\"服务续约\"></a>服务续约</h4><p>us-east-1d内的Application Client发起远程调用时，会先检索本区有没有可用的Application Service，如果没有就会通过某种算法调用us-east-1c或us-east-1e中的Application Service服务。</p>\n<h4 id=\"服务下线\"><a href=\"#服务下线\" class=\"headerlink\" title=\"服务下线\"></a>服务下线</h4><p>Application Service应用停止后，向Eureka Server发送一个cancel请求，告诉注册中心我已经退出了，Eureka Server接收到之后会将其移出注册列表，后面再有获取注册服务列表的时候就获取不到了，防止消费端消费不可用的服务。</p>\n<h4 id=\"服务剔除\"><a href=\"#服务剔除\" class=\"headerlink\" title=\"服务剔除\"></a>服务剔除</h4><p>值得注意的是，注册、续约、下线的请求默认优先选择本区域内的Eureka Server，只有当本区内的Eureka Server都不可用，才会选择其他区的Eureka Server。</p>\n<h3 id=\"弹性\"><a href=\"#弹性\" class=\"headerlink\" title=\"弹性\"></a>弹性</h3><p>Eureka客户端旨在处理一台或多台Eureka服务器的故障。由于Eureka客户端中包含注册表缓存信息，因此即使所有eureka服务器都发生故障，它们也能很好地运行</p>\n","next":{"title":"SpringBoot 2.0.5.RELEASE 中文翻译笔记Getting Starte","slug":"SpringBoot-2-0-5-RELEASE-中文翻译笔记Getting-Starte"},"link":"https://easyhaloo.github.io/post/Eureka架构综述/","toc":[{"title":"Eureka架构","id":"Eureka架构","index":"1","children":[{"title":"服务注册与调用","id":"服务注册与调用","index":"1.1","children":[{"title":"不同区域的服务注册与调用过程","id":"不同区域的服务注册与调用过程","index":"1.1.1"},{"title":"同区域的服务注册与调用过程","id":"同区域的服务注册与调用过程","index":"1.1.2"}]},{"title":"服务续约、下线、剔除","id":"服务续约、下线、剔除","index":"1.2","children":[{"title":"服务续约","id":"服务续约","index":"1.2.1"},{"title":"服务下线","id":"服务下线","index":"1.2.2"},{"title":"服务剔除","id":"服务剔除","index":"1.2.3"}]},{"title":"弹性","id":"弹性","index":"1.3"}]}],"copyright":true}